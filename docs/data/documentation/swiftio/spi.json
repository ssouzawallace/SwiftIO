{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SPI"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"Initialize-an-SPI-instance","level":3,"type":"heading","text":"Initialize an SPI instance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s initialize an SPI interface:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Initialize the pin SPI0 for communication with other parameters set to default.","let spi = SPI(Id.SPI0)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An SPI interface consists of a clock line, two lines for sending and reading data"},{"type":"text","text":" "},{"type":"text","text":"respectively and a CS line. In this case, the pins for SPI are SCK0, SDO0, SDI0,"},{"type":"text","text":" "},{"type":"text","text":"as well as any digital output pin used as a CS pin."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The devices on an SPI bus are distinguished by a CS line. Before communicating"},{"type":"text","text":" "},{"type":"text","text":"with a specified device, its CS line needs to be activated. Other devices"},{"type":"text","text":" "},{"type":"text","text":"connected on the same bus will ignore all data."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the cs pin is not defined, you need to configure it manually: set it to low"},{"type":"text","text":" "},{"type":"text","text":"or high to activate or release it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also pass the cs pin when initializing an SPI device, so the spi will"},{"type":"text","text":" "},{"type":"text","text":"manage cs when you read or write data."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Initialize the cs pin for the device.","let cs = DigitalOut(Id.D0)","\/\/ Pass the cs pin so it will be set automatically during communication.","let spi = SPI(Id.SPI0, csPin: cs)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What’s more, there are four modes for SPI communication which is decided by CPOL"},{"type":"text","text":" "},{"type":"text","text":"and CPHA. It depends on the device your board talks to. And the parameter"},{"type":"text","text":" "},{"type":"text","text":"bitOrder tells how data is sent on the bus. Make sure to set them correctly."}]},{"anchor":"Read-or-write-data","level":3,"type":"heading","text":"Read or write data"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SPI uses two data lines: one for sending data and the other for receiving data."},{"type":"text","text":" "},{"type":"text","text":"After initialization, you can use the write and read method to talk to the"},{"type":"text","text":" "},{"type":"text","text":"desired devices:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Read a UInt8 from the device and store it in a variable.","let byte: UInt8 = 0","spi.read(into: &byte)","","\/\/ Write a UInt8 value to the device.","let value: UInt8 = ...","spi.write(value)"]},{"anchor":"Read-or-write-data-and-handle-error","level":3,"type":"heading","text":"Read or write data and handle error"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In fact, the communication may fail due to all kinds of reason. You will"},{"type":"text","text":" "},{"type":"text","text":"thus get wrong data. So the methods involving reading or writing data will"},{"type":"text","text":" "},{"type":"text","text":"return the results in "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" type. You can capture the error and provide"},{"type":"text","text":" "},{"type":"text","text":"other solutions in advance."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Read a byte from the provided address and get the results.","let result = spi.read(into: &byte)","","if case .failure(let err) = result {","    \/\/ If the communication fails, execute the specified task.","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the data is successfully read, it is stored in "},{"type":"codeVoice","code":"byte"},{"type":"text","text":". If the communication"},{"type":"text","text":" "},{"type":"text","text":"fails, the "},{"type":"codeVoice","code":"byte"},{"type":"text","text":" may store a wrong value or remain unchanged, anyway, it is useless."},{"type":"text","text":" "},{"type":"text","text":"You can check the "},{"type":"codeVoice","code":"result"},{"type":"text","text":" to know what happens, and furthermore, handle the error."}]},{"anchor":"Example-1-Write-data-via-SPI-bus","level":3,"type":"heading","text":"Example 1: Write data via SPI bus"},{"type":"codeListing","syntax":"swift","code":["\/\/ Import the SwiftIO to use the related board functions.","import SwiftIO","\/\/ Import the MadBoard to decide which pin is used for the specific function.","import MadBoard","","\/\/ The cs pin is high so that the sensor would be in an inactive state.","let cs = DigitalOut(Id.D0, value: true)","\/\/ Initialize the pin SPI0. The cs pin will be controlled by spi automatically.","let spi = SPI(Id.SPI0, csPin: cs)","","\/\/ Write data to the device.","let result = spi.write([0x00, 0x01])","if case .failure(let err) = result {","    \/\/ If the communication fails, execute the specified task.","    ...","}",""]},{"anchor":"Example-2-Read-accelerations-using-LIS3DH-library","level":3,"type":"heading","text":"Example 2: Read accelerations using LIS3DH library"},{"type":"codeListing","syntax":"swift","code":["import SwiftIO","import MadBoard","import LIS3DH","","\/\/ The cs pin is high so that the sensor would be in an inactive state.","let cs = DigitalOut(Id.D0, value: true)","\/\/ The cs pin will be controlled by SPI. The CPOL and CPHA should be true for the sensor.","let spi = SPI(Id.SPI0, csPin: cs, CPOL: true, CPHA: true)","\/\/ Initialize the sensor using the spi instance.","let sensor = LIS3DH(spi)","","\/\/ Read values from the sensor and print them.","while true {","    print(sensor.readXYZ())","    sleep(ms: 1000)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, you just need to initialize the SPI pin and then talk to the"},{"type":"text","text":" "},{"type":"text","text":"sensor without caring about the details of communication. The library "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/madmachineio\/MadDrivers\/blob\/main\/Sources\/LIS3DH\/LIS3DH.swift"},{"type":"text","text":" "},{"type":"text","text":"has configured the sensor by sending and receiving data via SPI bus."},{"type":"text","text":" "},{"type":"text","text":"Therefore, you can directly read temperature using the predefined APIs."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftio\/spi"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"SPI is a four wire serial protocol for communication between devices."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SPI"}],"title":"SPI","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:7SwiftIO3SPIC","modules":[{"name":"SwiftIO"}],"navigatorTitle":[{"kind":"identifier","text":"SPI"}]},"hierarchy":{"paths":[["doc:\/\/SwiftIO\/documentation\/SwiftIO"]]},"topicSections":[{"title":"Initializer","identifiers":["doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/init(_:speed:csPin:CPOL:CPHA:bitOrder:)"]},{"title":"Reading data","identifiers":["doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/read(into:)","doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/read(into:count:)-8i18b","doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/read(into:count:)-mhbj"]},{"title":"Writing data","identifiers":["doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/write(_:)","doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/write(_:count:)-x9v4","doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/write(_:count:)-8007q"]},{"title":"Writing and reading data","identifiers":["doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/transceive(_:into:readCount:)","doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/transceive(_:writeCount:into:readCount:)"]},{"title":"Configuring SPI","identifiers":["doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/getSpeed()","doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/getMode()","doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/BitOrder"]},{"title":"Instance Properties","identifiers":["doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/cs","doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/obj"]}],"references":{"doc://SwiftIO/documentation/SwiftIO/SPI/write(_:count:)-x9v4":{"role":"symbol","title":"write(_:count:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"write"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<(), "},{"kind":"typeIdentifier","text":"Errno","preciseIdentifier":"s:7SwiftIO5ErrnoV"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Writes an array of UInt8 to the slave device."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/write(_:count:)-x9v4","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/write(_:count:)-x9v4"},"doc://SwiftIO/documentation/SwiftIO/SPI/read(into:count:)-8i18b":{"role":"symbol","title":"read(into:count:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"read"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" ["},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<(), "},{"kind":"typeIdentifier","text":"Errno","preciseIdentifier":"s:7SwiftIO5ErrnoV"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Reads an array of data from the slave device."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/read(into:count:)-8i18b","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/read(into:count:)-8i18b"},"doc://SwiftIO/documentation/SwiftIO/SPI/getSpeed()":{"role":"symbol","title":"getSpeed()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getSpeed"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Gets the current clock speed of SPI communication."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/getSpeed()","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/getspeed()"},"doc://SwiftIO/documentation/SwiftIO/SPI/init(_:speed:csPin:CPOL:CPHA:bitOrder:)":{"role":"symbol","title":"init(_:speed:csPin:CPOL:CPHA:bitOrder:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"IdName","preciseIdentifier":"s:7SwiftIO6IdNameP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"speed"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"csPin"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DigitalOut","preciseIdentifier":"s:7SwiftIO10DigitalOutC"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"CPOL"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"CPHA"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"bitOrder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SPI","preciseIdentifier":"s:7SwiftIO3SPIC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BitOrder","preciseIdentifier":"s:7SwiftIO3SPIC8BitOrderO"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initializes a specified interface for SPI communication as a master device."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/init(_:speed:csPin:CPOL:CPHA:bitOrder:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/init(_:speed:cspin:cpol:cpha:bitorder:)"},"doc://SwiftIO/documentation/SwiftIO/SPI/write(_:)":{"role":"symbol","title":"write(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"write"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<(), "},{"kind":"typeIdentifier","text":"Errno","preciseIdentifier":"s:7SwiftIO5ErrnoV"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Writes a UInt8 to the slave device."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/write(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/write(_:)"},"doc://SwiftIO/documentation/SwiftIO/SPI/transceive(_:into:readCount:)":{"role":"symbol","title":"transceive(_:into:readCount:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"transceive"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":", "},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" ["},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"readCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<(), "},{"kind":"typeIdentifier","text":"Errno","preciseIdentifier":"s:7SwiftIO5ErrnoV"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Writes a UInt8 to the slave device and then read bytes from it."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/transceive(_:into:readCount:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/transceive(_:into:readcount:)"},"doc://SwiftIO/documentation/SwiftIO/SPI/cs":{"role":"symbol","title":"cs","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"cs"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"A boolean value that tells whether the cs pin is set (true) or not (false)."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/cs","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/cs"},"doc://SwiftIO/documentation/SwiftIO/SPI/read(into:count:)-mhbj":{"role":"symbol","title":"read(into:count:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"read"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":", "},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<(), "},{"kind":"typeIdentifier","text":"Errno","preciseIdentifier":"s:7SwiftIO5ErrnoV"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Reads the data from the slave device into the specified buffer pointer."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/read(into:count:)-mhbj","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/read(into:count:)-mhbj"},"doc://SwiftIO/documentation/SwiftIO/SPI/obj":{"role":"symbol","title":"obj","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"obj"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"}],"abstract":[],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/obj","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/obj"},"doc://SwiftIO/documentation/SwiftIO/SPI/write(_:count:)-8007q":{"role":"symbol","title":"write(_:count:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"write"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":", "},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<(), "},{"kind":"typeIdentifier","text":"Errno","preciseIdentifier":"s:7SwiftIO5ErrnoV"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Writes a buffer pointer of the data in the underlying storage to the"},{"type":"text","text":" "},{"type":"text","text":"slave device."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/write(_:count:)-8007q","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/write(_:count:)-8007q"},"doc://SwiftIO/documentation/SwiftIO/SPI":{"role":"symbol","title":"SPI","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SPI"}],"abstract":[{"type":"text","text":"SPI is a four wire serial protocol for communication between devices."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SPI"}],"url":"\/documentation\/swiftio\/spi"},"doc://SwiftIO/documentation/SwiftIO/SPI/BitOrder":{"role":"symbol","title":"SPI.BitOrder","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"BitOrder"}],"abstract":[{"type":"text","text":"The bit order that the data is sent on SPI bus: MSB or LSB."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/BitOrder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BitOrder"}],"url":"\/documentation\/swiftio\/spi\/bitorder"},"doc://SwiftIO/documentation/SwiftIO/SPI/transceive(_:writeCount:into:readCount:)":{"role":"symbol","title":"transceive(_:writeCount:into:readCount:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"transceive"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"writeCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" ["},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"readCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<(), "},{"kind":"typeIdentifier","text":"Errno","preciseIdentifier":"s:7SwiftIO5ErrnoV"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Writes an array of UInt8 to the slave device and then read bytes from it."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/transceive(_:writeCount:into:readCount:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/transceive(_:writecount:into:readcount:)"},"doc://SwiftIO/documentation/SwiftIO":{"role":"collection","title":"SwiftIO","abstract":[{"type":"text","text":"The SwiftIO library allows you to access and control the hardware in an easy way."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO","kind":"symbol","type":"topic","url":"\/documentation\/swiftio"},"doc://SwiftIO/documentation/SwiftIO/SPI/read(into:)":{"role":"symbol","title":"read(into:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"read"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<(), "},{"kind":"typeIdentifier","text":"Errno","preciseIdentifier":"s:7SwiftIO5ErrnoV"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Reads a UInt8 from the slave device."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/read(into:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/read(into:)"},"doc://SwiftIO/documentation/SwiftIO/SPI/getMode()":{"role":"symbol","title":"getMode()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getMode"},{"kind":"text","text":"() -> (CPOL"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", CPHA"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", bitOrder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SPI","preciseIdentifier":"s:7SwiftIO3SPIC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BitOrder","preciseIdentifier":"s:7SwiftIO3SPIC8BitOrderO"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Gets the SPI mode."}],"identifier":"doc:\/\/SwiftIO\/documentation\/SwiftIO\/SPI\/getMode()","kind":"symbol","type":"topic","url":"\/documentation\/swiftio\/spi\/getmode()"},"https://github.com/madmachineio/MadDrivers/blob/main/Sources/LIS3DH/LIS3DH.swift":{"title":"LIS3DH","titleInlineContent":[{"type":"text","text":"LIS3DH"}],"type":"link","identifier":"https:\/\/github.com\/madmachineio\/MadDrivers\/blob\/main\/Sources\/LIS3DH\/LIS3DH.swift","url":"https:\/\/github.com\/madmachineio\/MadDrivers\/blob\/main\/Sources\/LIS3DH\/LIS3DH.swift"}}}